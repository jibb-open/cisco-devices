import xapi from "xapi"
import { JIBB } from "./#JSSDKFileName#"
let JSSDKVersion = "#JSSDKVersion#"
let ApiKey = "YourApiKey"
let RecordingEmail = ""
let MeetingAPI = JIBB.Meeting
let Auth = JIBB.Auth
let EventBus = JIBB.EventBus
let Recording = JIBB.Recording

const SurfaceType = {
	PAPER: "PAPER",
	WHITEBOARD: "WHITEBOARD",
}

function getHostname(url) {
  const match = url.match(/^(?:https?:\/\/)?(?:www\.)?([^\/:]+)/i);
  return match && match[1];
}

function Config(apiKey) {

	this.apiKey = apiKey
	this.webURL = "#WebAppUrl#"
	xapi.Command.WebEngine.MediaAccess.add({ Hostname: getHostname(this.webURL), Device: "Camera" })
	JIBB.Config.setApiBaseURL("#ApiUrl#")
	JIBB.Auth.configure({ apiKey: apiKey })
}

let SessionDetails = {
	meetingId: "",
	meetingToken: "",
	userToken: "",
	meetingUrl: "",
	cameraId: "",
	clientId: "",
	selectedInput: 1,
}

let CurrentDeviceCameraSettings = {
	SettingsCleared: true,
	PresenterTrack: false,
	SpeakerTrack: "null",
	Pan: 0,
	Tilt: 0,
	Zoom: 0,
}

const checkSystemHealth = async (url) => {
    try {
        const res = await xapi.Command.HttpClient.Get({ ResultBody: 'None', Url: url });
        if (res.StatusCode == 200) {
            console.log(`You have access to ${url}`);
        } else {
            throw new Error(`Unexpected status code: ${res.StatusCode}`);
        }
    } catch (error) {
		console.log(error)
        console.log(`You do not have access to ${url}. Error: ${error}`);
        throw new Error(`You do not have access to JIBB APIs. Error: ${error.message}`);
    }

    try {
        const webEngineMode = await xapi.Config.WebEngine.Mode.get();
        if (webEngineMode !== "On") {
            throw new Error('WebEngine is off');
        }

        const httpClientMode = await xapi.Config.HttpClient.Mode.get();
        if (httpClientMode !== "On") {
            throw new Error('HttpClient is off');
        }
    } catch (error) {
		console.log(error)
        console.log(`You do not have access to device configuration: ${error}`);
        throw new Error(`Device configuration error: ${error.message}`);
    }
};

const getDeviceConfig = async () => {
	let DeviceInfo = {}
	let value = await xapi.Status.SystemUnit.Software.DisplayName.get()
	DeviceInfo.OS = value
	value = await xapi.Status.SystemUnit.ProductId.get()
	DeviceInfo.DeviceType = value

	DeviceInfo.ApiKey = ApiKey
	DeviceInfo.JIBBURI = "#ApiUrl#"
	DeviceInfo.JSSDKVersion = JSSDKVersion

	console.log("*** Device INFO ***")
	console.log(DeviceInfo)
	console.log("*** Device INFO ***")
}

async function generateMeetingLink() {
	console.log("generating meeting link ...")
	let title = await createTitle()
	await gettingUserToken()
	await createMeeting(title)
	SessionDetails.meetingUrl = `${config.webURL}/cisco/devices/${SessionDetails.meetingId}?user_token=${SessionDetails.userToken}`
}

async function createTitle() {
	let title = String(await xapi.Config.SystemUnit.CustomDeviceId.get())
	if (String(title) == "") {
		title = "JIBB Workspace"
	}
	return title
}

async function gettingUserToken() {
	try {
		SessionDetails.userToken = await Auth.getUserToken()
	} catch (err) {
		console.log(`Cannot get user token: ${err}`)
		xapi.Command.UserInterface.Message.Alert.Display({
			Duration: 20,
			Text: "Something went wrong. Please check your API KEY",
			Title: "Error",
		})
		throw ("Cannot get user token. Please check your API KEY")
	}
}

async function gettingMeetingToken() {
	SessionDetails.meetingToken = await MeetingAPI.getMeetingToken({
		meetingId: SessionDetails.meetingId,
		permission: 2,
	})
}

async function createMeeting(title) {
	SessionDetails.meetingId = await MeetingAPI.createMeeting({ title: title, isTemporary: true })
}

async function autoStartMeeting() {
	console.log("autoStartMeeting ...")
	hideJibbPanel()
	hideCameraSelfView()
	await generateMeetingLink()
	await openMeetingUrlInWebView()
	await sleep(10000) // wait until page finishes loading

	try {
		await getWebClinetId()
		await sleep(3000) // wait to ensure client is registered
		await getCameraId()
	} catch (err) {
		console.log(err)
		console.error("Client or camera setup failed:", err.message)
		xapi.Command.UserInterface.Message.Alert.Display({
			Duration: 10,
			Text: "Please contact admin to check device settings",
			Title: "Setup Error",
		});
		return;
	}

	await gettingMeetingToken()
	await startTheMeeting()
	await sleep(5000)
	startRecording()
}


async function startTheMeeting() {
	let req = {
		meetingToken: SessionDetails.meetingToken,
		surfaceType: SurfaceType.WHITEBOARD,
		fixedCorners: true,
		cameraId: SessionDetails.cameraId,
		clientId: SessionDetails.clientId,
		enableColor: true,
	}
	await EventBus.startStream(req)
}


async function getCameraId() {
  try {
    const cameraList = await EventBus.getCameraList(SessionDetails.clientId);
    console.log("Raw camera list received from EventBus.getCameraList():", cameraList);

    if (!Array.isArray(cameraList) || cameraList.length === 0) {
      console.warn("Camera list is empty or not an array.");
      return Promise.reject("No cameras detected or accessible.");
    }

    const validCameras = cameraList.filter(cam => cam?.id?.trim());
    const invalidCameras = cameraList.filter(cam => !cam?.id?.trim());

    validCameras.forEach((cam, i) => {
      console.log(`  [${i + 1}] ID: ${cam.id}, Name: ${cam.name || "N/A"}`);
    });

    if (invalidCameras.length > 0) {
      invalidCameras.forEach((cam, index) => {
        console.warn(`  [${index + 1}] Camera object is invalid or missing 'id':`, cam);
      });
    }

    if (validCameras.length === 0) {
      return Promise.reject("No valid camera ID available.");
    }

    SessionDetails.cameraId = validCameras[0].id;
  } catch (err) {
    console.warn("Error in getCameraId:", err.message);
    return Promise.reject("Camera detection failed: " + err.message);
  }
}

async function getWebClinetId() {
	let statusList = await EventBus.getClientStatusList()
	console.log("Full statusList from getClientStatusList():", statusList)

	if (Array.isArray(statusList) && statusList.length > 0 && statusList[0]?.id) {
		SessionDetails.clientId = statusList[0].id
	} else {
		console.error("No valid client ID found in status list")
		throw new Error("Unable to get a valid client ID")
	}
}

async function openMeetingUrlInWebView() {
	await xapi.Command.UserInterface.WebView.Display({ Title: "jibb", Url: SessionDetails.meetingUrl })
}

async function stopMeeting() {
	console.log("stopMeeting ...");

	try {
		await stopRecording();
	} catch (err) {
		console.log(err)
		console.warn("Error stopping recording:", err.message);
	}

	try {
		await closeWebView();
	} catch (err) {
		console.log(err)
		console.warn("Error closing WebView:", err.message);
	}

	try {
		await hideCameraSelfView();
	} catch (err) {
		console.log(err)
		console.warn("Error hiding self-view:", err.message);
	}

	try {
		await hideJibbPanel();
	} catch (err) {
		console.log(err)
		console.warn("Error hiding JIBB panel:", err.message);
	}

	try {
		await setDeviceCameraToBeforeSettings();
	} catch (err) {
		console.log(err)
		console.warn("Error restoring camera settings:", err.message);
	}
}


async function startRecording() {
	if (RecordingEmail == "") {
		console.warn("Recoring email is empty. Recording will not start!")
		return
	}
	console.log("startRecording ...")
	let title = await createTitle()
	try {
		await Recording.startRecording({
			alternativeEmail: RecordingEmail,
			sensivityLevel: 2,
			meetingId: SessionDetails.meetingId,
			meetingToken: SessionDetails.meetingToken,
			title: title,
		})
	} catch (err) {
		console.log("Recording Error: ", err)
	}
}

async function stopRecording() {
	try {
		await Recording.stopRecording()
	} catch (err) {
		console.warn("Cannot stop recording")
	}
}

async function setCameraPreset(positionName) {
  if (CurrentDeviceCameraSettings.SettingsCleared) {
    await getDeviceCurrentCameraSettings();
  }

  try {
    await xapi.Config.Cameras.PresenterTrack.Enabled.set(false);
  } catch (err) {
    console.warn("This device does not have PresenterTrack");
  }

  try {
    await xapi.Command.Cameras.SpeakerTrack.Deactivate();
  } catch (err) {
    console.warn("This device does not have SpeakerTrack");
  }

  const presetNamesToTry = [positionName, "Jibb", "jibb"];
  for (const name of presetNamesToTry) {
    const PresetId = await getCameraPresetId(name);
    if (PresetId !== -1) {
      try {
        console.log(`Activating preset '${name}' (ID: ${PresetId})`);
        await xapi.Command.Camera.Preset.Activate({ PresetId });
        return; // success
      } catch (err) {
        console.warn(`Activation failed for preset '${name}' (ID: ${PresetId}):`, err.message);
      }
    }
  }

  console.warn("No usable preset found. Skipping camera position restore.");
}

async function getDeviceCurrentCameraSettings() {
	console.log("getDeviceCurrentCameraSettings");
	try {
		CurrentDeviceCameraSettings.PresenterTrack = await xapi.Config.Cameras.PresenterTrack.Enabled.get();
	} catch (err) {
		console.log(err)
		console.warn("PresenterTrack not available:", err.message);
	}

	try {
		CurrentDeviceCameraSettings.SpeakerTrack = await xapi.Status.Cameras.SpeakerTrack.Status.get();
	} catch (err) {
		console.log(err)
		console.warn("SpeakerTrack not available:", err.message);
	}

	try {
		const cameras = await xapi.Status.Cameras.Camera.get();
		if (Array.isArray(cameras) && cameras.length > 0) {
			const cam = cameras[0]; // safely pick first camera
			CurrentDeviceCameraSettings.Pan = cam.Position?.Pan || 0;
			CurrentDeviceCameraSettings.Tilt = cam.Position?.Tilt || 0;
			CurrentDeviceCameraSettings.Zoom = cam.Position?.Zoom || 0;
		} else {
			console.warn("No camera data found for position.");
		}
	} catch (err) {
		console.log(err)
		console.warn("Error retrieving camera position:", err.message);
	}

	CurrentDeviceCameraSettings.SettingsCleared = false;
}


async function setDeviceCameraToBeforeSettings() {
	console.log("setDeviceCameraToBeforeSettings");

	// Restore PresenterTrack if previously enabled
	try {
		if (CurrentDeviceCameraSettings.PresenterTrack) {
			await xapi.Config.Cameras.PresenterTrack.Enabled.set(true);
		}
	} catch (err) {
		console.log(err)
		console.warn("PresenterTrack not supported or failed to re-enable:", err.message);
	}

	// Restore SpeakerTrack if previously active
	try {
		if (CurrentDeviceCameraSettings.SpeakerTrack === "Active") {
			await xapi.Command.Cameras.SpeakerTrack.Activate();
		}
	} catch (err) {
		console.log(err)
		console.warn("SpeakerTrack not supported or failed to re-activate:", err.message);
	}

	// Restore camera position using valid CameraId
	try {
		const cameras = await xapi.Status.Cameras.Camera.get();

		if (Array.isArray(cameras) && cameras.length > 0) {
			const cameraId = cameras[0].id || 1; // fallback to 1 if not present
			await xapi.Command.Camera.PositionSet({
				CameraId: cameraId,
				Pan: CurrentDeviceCameraSettings.Pan,
				Tilt: CurrentDeviceCameraSettings.Tilt,
				Zoom: CurrentDeviceCameraSettings.Zoom,
			});
		} else {
			console.warn("No physical cameras found to reset position.");
		}
	} catch (err) {
		console.log(err)
		console.warn("Camera PositionSet failed or not supported:", err.message);
	}

	// Clear state
	clearCurrentDeviceCameraSettings();
}

function clearCurrentDeviceCameraSettings() {
	CurrentDeviceCameraSettings.SettingsCleared = true
	CurrentDeviceCameraSettings.PresenterTrack = false
	CurrentDeviceCameraSettings.SpeakerTrack = "null"
	CurrentDeviceCameraSettings.Pan = 0
	CurrentDeviceCameraSettings.Tilt = 0
	CurrentDeviceCameraSettings.Zoom = 0
}

async function getCameraPresetId(positionName) {
  try {
    const cameras = await xapi.Status.Cameras.Camera.get();
    if (!Array.isArray(cameras) || cameras.length === 0) {
      console.warn("No cameras available for preset lookup");
      return -1;
    }

    const availableCameraIds = cameras.map(c => c.id);
    const primaryCameraId = availableCameraIds[0] || 1;

    const { Preset: presets = [] } = await xapi.Command.Camera.Preset.List({
      CameraId: primaryCameraId,
      DefaultPosition: false
    });

    const match = presets.find(
      preset => preset.Name === positionName &&
        (!preset.CameraId || availableCameraIds.includes(preset.CameraId))
    );

    return match?.PresetId ?? -1;
  } catch (err) {
    console.warn("Failed to fetch preset ID:", err.message);
    return -1;
  }
}


function closeWebView() {
	return xapi.Command.UserInterface.WebView.Clear({ Target: "PersistentWebApp" });
}

function hideCameraSelfView() {
	return xapi.Command.Video.Selfview.Set({
		FullscreenMode: "Off",
		Mode: "Off",
		PIPPosition: "LowerRight",
	});
}


function showCameraSelfView() {
	xapi.Command.Video.Selfview.Set({
		FullscreenMode: "Off",
		Mode: "On",
		PIPPosition: "LowerRight",
	})
}

function hideJibbPanel() {
	return xapi.Command.UserInterface.Extensions.Panel.Close();
}

// Add the Jibb panel to UI
async function addPanel() {
	console.info("Adding  panel")
	const xml = uiExtension
	await xapi.Command.UserInterface.Extensions.Panel.Save(
		{
			PanelId: "jibb_panel",
		},
		xml
	)
}

function sleep(ms) {
	return new Promise((resolve) => setTimeout(resolve, ms))
}

function showAlert() {
	xapi.Command.UserInterface.Message.Alert.Display({
		Duration: 3,
		Text: "JIBB Ready",
		Title: "JIBB is Ready",
	})
}

let config = new Config(ApiKey)

// Startup!
async function main() {
	#mainBody#
}

function reactToStartAndStopClick() {
	xapi.Event.UserInterface.Extensions.Widget.Action.on((event) => {
		if (event.Type == "released") {
			switch (event.WidgetId) {
				case `jibb_start_toggle`:
					if (event.Value == "start") {
						autoStartMeeting()
					} else if (event.Value == "stop") {
						stopMeeting()
					}
					break
				default:
					break
			}
		}
	})
}

function reactToJibbClick() {
	xapi.Event.UserInterface.Extensions.Panel.Clicked.on(async (value) => {
		if (value.PanelId == "jibb_panel") {
			try {
				await getDeviceConfig()
				await checkSystemHealth("#ApiUrl#/health")
			} catch (err) {
				xapi.Command.UserInterface.Message.Alert.Display({
					Duration: 20,
					Text: "HttpClient, or JIBB API access. Please contact your device admin to check settings.",
					Title: "Essential device settings are missing",
				})
				hideJibbPanel()
				throw (err)
			}
			setCameraPreset(`Jibb${SessionDetails.selectedInput}`)
			showCameraSelfView()
		}
	})
}

function stringReplace(oldStr, newStr) {
	uiExtension = uiExtension.replace(oldStr, newStr)
}


let uiExtension = `<Extensions>
  <Version>1.11</Version>
  <Panel>
       <Order>1</Order>
	   <PanelId>jibb_panel</PanelId>
	   <Location>#UILocation#</Location>
	   <Icon>Custom</Icon>
	   <Name>JIBB</Name>
	   <ActivityType>Custom</ActivityType>
    <CustomIcon>
      <Content></Content>
      <Id>d5c72d04a0311f930447729e1331908693ed5d5494d6e1003149ddb0a4a5ed95</Id>
    </CustomIcon>
    <Page>
      <Name>JIBB</Name>
      <Row>
        <Name>Row</Name>
        <Widget>
          <WidgetId>widget_3</WidgetId>
          <Name>Instantly Digitize &amp; Share the Meeting Room Whiteboard</Name>
          <Type>Text</Type>
          <Options>size=4;fontSize=small;align=center</Options>
        </Widget>
        <Widget>
          <WidgetId>widget_4</WidgetId>
          <Name>01 - Enter your email to receive a PDF copy of your session</Name>
          <Type>Text</Type>
          <Options>size=4;fontSize=normal;align=left</Options>
        </Widget>
        <Widget>
          <WidgetId>widget_2</WidgetId>
          <Name>Current Email: ${RecordingEmail}</Name>
          <Type>Text</Type>
          <Options>size=2;fontSize=small;align=left</Options>
        </Widget>
        <Widget>
          <WidgetId>jibb_email</WidgetId>
          <Name>Edit Email</Name>
          <Type>Button</Type>
          <Options>size=2</Options>
        </Widget>
      </Row>
      <Row>
        <Name>Row</Name>
        <Widget>
          <WidgetId>widget_5</WidgetId>
          <Name>02 - Tap Start when you're ready to Launch JIBB Session</Name>
          <Type>Text</Type>
          <Options>size=4;fontSize=normal;align=left</Options>
        </Widget>
      </Row>
      <Row>
        <Name>Row</Name>
        <Widget>
		 <WidgetId>jibb_start_toggle</WidgetId>
		 <Type>GroupButton</Type>
		 <Options>size=4</Options>
		 <ValueSpace>
		   <Value>
			 <Key>start</Key>
			 <Name>Start</Name>
		   </Value>
		   <Value>
			 <Key>stop</Key>
			 <Name>Stop</Name>
		   </Value>
		 </ValueSpace>
	   </Widget>
      </Row>
      <Options>hideRowNames=1</Options>
    </Page>
  </Panel>
</Extensions>`

#InputCode#

#EmailCode#

#CameraControlCode#

main()
